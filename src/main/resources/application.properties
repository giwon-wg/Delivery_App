server.port=8080
server.shutdown=graceful

spring.application.name=Delivery_APP

spring.mvc.pathmatch.matching-strategy=ant_path_matcher

spring.jackson.property-naming-strategy=SNAKE_CASE

# Swagger
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.default-produces-media-type=application/json
springdoc.writer-with-default-pretty-printer=true
springdoc.model-and-view-allowed=true

# DB
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${MYSQL_URL}
spring.datasource.username=${MYSQL_USERNAME}
spring.datasource.password=${MYSQL_PASSWORD}

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show-sql=true
spring.jpa.properties.properties.hibernate.format_sql=true
spring.jpa.properties.use_sql_comments=true
spring.jpa.open-in-view=false

# JWT
spring.jwt.token.access.minute=15
spring.jwt.token.refresh.minute=20160
spring.jwt.secret=${SECRET_KEY}


# Redis
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
cache.ttl.values.friends.minutes=15

# KaKao
kakao.api-key=${KAKAO_REST_API_KEY}


# Google OAuth
spring.security.oauth2.client.registration.google.client-id=${CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email


spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.client-name=Google

# ??? ?? ? ?????? ?? ??
spring.security.oauth2.client.client-authentication-method=post

# http://localhost:8080/oauth2/authorization/google